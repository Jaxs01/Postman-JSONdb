{
	"info": {
		"_postman_id": "19147cf4-77e0-4f0d-9d2f-a66a31435e64",
		"name": "JsonServer - End to End",
		"description": "//download https://nodejs.org/en/download/ \n//create a db.json .... cmd ->Start server  json-server --watch db.json\n{\n\t\"posts\": [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"title\": \"Updated Title\",\n\t\t\t\"author\": \"Updated Author\"\n\t\t}\n\t],\n\t\"comments\": [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"body\": \"some comment\",\n\t\t\t\"postId\": 1\n\t\t}\n\t],\n\t\"profile\": {\n\t\t\"name\": \"typicode\"\n\t}\n}\n\n//http://localhost:3000/\n\nget all date in DB\nCreate a new Record\nget Record\nchange Record\nget Record\ndelete Record\nget all date in DB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET-all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31400249-570a-428e-a60f-869a4707f680",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"New Author\");",
							"});",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				},
				"description": "GET"
			},
			"response": []
		},
		{
			"name": "GET- 1 - Status 200",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/posts/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST-NewRecord",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\t\t\"id\": 2,\n\t\t\t\"title\": \"Jaxs Update\",\n\t\t\t\"author\": \"Jaxs Hayn\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				},
				"description": "http://localhost3000/posts"
			},
			"response": []
		},
		{
			"name": "GET-all after creating a new response",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31400249-570a-428e-a60f-869a4707f680",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Jaxs Hayn\");",
							"});",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put - Change -Record",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 2,\r\n  \"title\": \"I change the new created Record\",\r\n  \"author\": \"And I change it here as well\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/posts/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts",
						"2"
					]
				},
				"description": "//change record 1 \nhttp://localhost:3000/posts/1"
			},
			"response": []
		},
		{
			"name": "GET-all after changing the new response",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31400249-570a-428e-a60f-869a4707f680",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"And I change it here as well\");",
							"});",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - 2",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/posts/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts",
						"2"
					]
				},
				"description": "Delete record 2"
			},
			"response": []
		},
		{
			"name": "GET-all after delete the record",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31400249-570a-428e-a60f-869a4707f680",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"New Author\");",
							"});",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}